<section
	class="cloudflare speed image_resizing initialize loading"
	data-endpoint="<?php echo $block->getApiEndpoint () ?>"
	data-form-key="<?php echo $block->getFormKey () ?>"
	data-tab-name="speed"
	data-section-name="image_resizing" >
	<div class="row" >
		<div class="wrapper_left" >
			<span class="section_title" >Image Resizing</span>
			<p>You can resize, adjust quality, and convert images to WebP format, on demand. We cache every derived image at the edge, so you store only the original image.</p>
			<p>This allows you to adapt images to your site’s layout and your visitors’ screen sizes, quickly and easily, without maintaining a server-side image processing pipeline.</p>
		</div>
		<div class="wrapper_right" >
			<div>
				<label class="switch" >
					<input class="trigger" type="checkbox" name="mode" data-target="toggle" />
					<span class="knob" ></span>
				</label>
			</div>
			<div class="lightbox" style="background-image: url(<?php echo $block->getViewFileUrl ('JetRails_Cloudflare/images/loading.svg') ?>)" ></div>
		</div>
	</div>
	<div class="row collapsable" >
		<div class="wrapper_bottom" >
			<a data-tab="help" >Help</a>
		</div>
		<div data-tab-content="help" >
			<h3>What does Image Resizing do?</h3>
			<p>Resizing fetches the original image and caches it (following the usual rules of HTTP caching, Cache-Control header, etc.). Requests for multiple different image sizes are likely to reuse the cached original image, without causing extra transfers from the origin server.</p>
			<p>Resized images follow the same caching rules as the original image and their Cache-Control header is identical. We do not support purging of resized variants.  Purging of the original image URL will also purge all of its resized variants.</p>
			<p><a href="https://developers.cloudflare.com/images" >Image Resizing documentation</a></p>
		</div>
	</div>
</section>
